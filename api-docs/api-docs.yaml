functions:
  - name: Auth
    description: Endpoints related to users and authentication
    types: types/auth.ts
    validators: validators/auth.ts
    endpoints:
      # POST Request Login Code
      - method: POST
        route: /auth/login
        description: Initiate login to request a login code by email
        request: EmailRequest
        response: "{ message: 'Check your inbox' }"
        authenticated: False
      # POST Verify Login Code
      - method: POST
        route: /auth/verify-code
        description: Verify login code to get an access token
        request: LoginVerifyRequest
        response: AuthData
        authenticated: False
      # GET Verify Magic Link
      - method: GET
        route: /auth/verify-link/:token/:redirectEnv
        description: Verify magic link to redirect client to get access token
        request: null
        response: null
        authenticated: False
      # POST Password login
      - method: POST
        route: /auth/password-login
        description: Login using email and password
        request: PasswordAuthRequest
        response: AuthData
        authenticated: False
      # POST Password signup
      - method: POST
        route: /auth/password-signup
        description: Sign up with email and password
        request: PasswordAuthRequest
        response: IdObject
        authenticated: False
      # PUT Set password
      - method: PUT
        route: /auth/set-password
        description: Set a new or update password for an existing user
        request: PasswordAuthRequest
        response: IdObject
        authenticated: True
      # POST Refresh Token
      - method: POST
        route: /auth/token-refresh
        description: Get a new access token
        request: null
        response: AuthData
        authenticated: True
      # POST Request instant Login Code
      - method: POST
        route: /auth/instant-login-code
        description: FOR TESTING PURPOSES ONLY / WORKS ONLY ON DEV ENVIRONMENT
        request: EmailRequest
        response: '{ loginCode: string }'
        authenticated: False

  - name: Notes
    description: Endpoints related to Notes
    types: types/notes.ts
    validators: validators/notes.ts
    endpoints:
      # GET Fetch all notes
      - method: GET
        route: /notes
        description: Get all notes of the current user
        request: null
        response: Note[]
        authenticated: True
      # POST Create a note
      - method: POST
        route: /notes
        description: Create a new note
        request: NoteRequest
        response: Note
        authenticated: True
      # PUT Update a note
      - method: PUT
        route: /notes/:id
        description: Update a note
        request: NoteRequest
        response: Note
        authenticated: True
      # DELETE Delete a note
      - method: DELETE
        route: /notes/:id
        description: Delete a note
        request: null
        response: IdObject
        authenticated: True

  - name: Personal Data
    description: Endpoints related to Personal Data
    types: types/personal-data.ts
    validators: validators/personal-data.ts
    endpoints:
      # GET Fetch all personal data
      - method: GET
        route: /personal-data
        description: Get all personal data of the current user
        request: null
        response: PersonalData[]
        authenticated: True
      # POST Create a personal data
      - method: POST
        route: /personal-data
        description: Create a new personal data
        request: PersonalDataRequest
        response: PersonalData
        authenticated: True
      # PUT Update a personal data
      - method: PUT
        route: /personal-data/:id
        description: Update a personal data
        request: PersonalDataRequest
        response: PersonalData
        authenticated: True
      # DELETE Delete a personal data
      - method: DELETE
        route: /personal-data/:id
        description: Delete a personal data
        request: null
        response: IdObject
        authenticated: True

  - name: Shortcuts
    description: Endpoints related to Shortcuts
    types: types/shortcuts.ts
    validators: validators/shortcuts.ts
    endpoints:
      # GET Fetch all shortcuts
      - method: GET
        route: /shortcuts
        description: Get all shortcuts of the current user
        request: null
        response: Shortcut[]
        authenticated: True
      # POST Create a shortcut
      - method: POST
        route: /shortcuts
        description: Create a new shortcut
        request: ShortcutRequest
        response: Shortcut
        authenticated: True
      # PUT Update a shortcut
      - method: PUT
        route: /shortcuts/:id
        description: Update a shortcut
        request: ShortcutRequest
        response: Shortcut
        authenticated: True
      # DELETE Delete a shortcut
      - method: DELETE
        route: /shortcuts/:id
        description: Delete a shortcut
        request: null
        response: IdObject
        authenticated: True

  - name: PK Start settings
    description: Endpoints related to PK Start settings
    types: types/start-settings.ts
    validators: validators/start-settings.ts
    endpoints:
      # GET Fetch PK Start settings
      - method: GET
        route: /start-settings
        description: Get PK Start settings of the current user
        request: null
        response: PkStartSettings
        authenticated: True
      # PUT Update PK Start settings
      - method: PUT
        route: /start-settings
        description: Update PK Start settings of the current user
        request: PkStartSettingsRequest
        response: PkStartSettings
        authenticated: True

  - name: Cycling [DEPRECATED]
    description: Endpoints for cycling data on PK Start [DEPRECATED] - Use the Activities API instead
    types: types/cycling.ts
    validators: validators/cycling.ts
    endpoints:
      # GET Fetch Cycling data
      - method: GET
        route: /cycling
        description: Get the cycling data of the current user
        request: null
        response: Cycling
        authenticated: True
      # POST Initialize Cycling data
      - method: POST
        route: /cycling/initialize
        description: Initialize cycling data for the current user
        request: null
        response: Cycling
        authenticated: True
      # PATCH Update weekly goal
      - method: PATCH
        route: /cycling/weekly-goal
        description: Set weekly goal for the current user
        request: SetWeeklyGoalRequest
        response: Cycling
        authenticated: True
      # PATCH Update monthly goal
      - method: PATCH
        route: /cycling/monthly-goal
        description: Set monthly goal for the current user
        request: SetMonthlyGoalRequest
        response: Cycling
        authenticated: True
      # POST Add chore
      - method: POST
        route: /cycling/chore
        description: Create a new chore
        request: CyclingChoreRequest
        response: Cycling
        authenticated: True
      # PUT Update a chore
      - method: PUT
        route: /cycling/chore/:id
        description: Update a chore
        request: CyclingChoreRequest
        response: Cycling
        authenticated: True
      # DELETE Delete a chore
      - method: DELETE
        route: /cycling/chore/:id
        description: Remove a chore
        request: null
        response: Cycling
        authenticated: True

  - name: Activities
    description: Endpoints for activities data on PK Start
    types: types/activities.ts
    validators: validators/activities.ts
    endpoints:
      # GET Fetch activities data
      - method: GET
        route: /activities
        description: Get the activities data of the current user
        request: null
        response: Activities
        authenticated: True
      # POST Initialize activities data
      - method: POST
        route: /activities/initialize
        description: Initialize activities data for the current user
        request: null
        response: Activities
        authenticated: True
      # PATCH Update goals
      - method: PATCH
        route: /activities/goals
        description: Set weekly and monthly goals for the current user
        request: SetGoalsRequest
        response: Activities
        authenticated: True
      # POST Add chore
      - method: POST
        route: /activities/chore
        description: Create a new chore
        request: CyclingChoreRequest
        response: Activities
        authenticated: True
      # PUT Update a chore
      - method: PUT
        route: /activities/chore/:id
        description: Update a chore
        request: CyclingChoreRequest
        response: Activities
        authenticated: True
      # DELETE Delete a chore
      - method: DELETE
        route: /activities/chore/:id
        description: Remove a chore
        request: null
        response: Activities
        authenticated: True

  - name: Data backup
    description: Endpoints for PK Central data backup
    types: types/data-backup.ts
    validators: null
    endpoints:
      # GET Send data backup email
      - method: GET
        route: /data-backup/email
        description: Sends an email with data backup of the current user
        request: null
        response: DataBackup
        authenticated: True
      # GET Fetch data backup in response
      - method: GET
        route: /data-backup/data
        description: Get data backup object of the current user
        request: null
        response: DataBackup
        authenticated: True

  - name: Proxy
    description: Endpoints to access third party APIs or remote files
    types: types/proxy.ts
    validators: null
    endpoints:
      # GET Fetch birthdays list
      - method: GET
        route: /proxy/birthdays
        description: Get birthdays list of the current user
        request: null
        response: BirthdayItem[]
        authenticated: True
      # GET Fetch korean word list
      - method: GET
        route: /proxy/korean
        description: Get korean word list of the current user
        request: null
        response: KoreanDictItem[]
        authenticated: True
      # GET Fetch airport data by IATA code
      - method: GET
        route: /proxy/airport/:iata
        description: Get airport data by IATA code
        request: null
        response: Airport
        authenticated: True
      # GET Fetch airline data by IATA code
      - method: GET
        route: /proxy/airline/:iata
        description: Get airline data by IATA code
        request: null
        response: Airline
        authenticated: True
      # GET Fetch city and country for coordinates
      - method: GET
        route: /proxy/city/:coords
        description: Get city and country for coordinates, lat and lng should be separated by comma, e.g. 12.3456,87.76543
        request: null
        response: VisitRequest
        authenticated: True

  - name: Flights
    description: Endpoints related to Flights (Tripz)
    types: types/flights.ts
    validators: validators/flights.ts
    endpoints:
      # GET Fetch all flights
      - method: GET
        route: /flights
        description: Get all flights of the current user
        request: null
        response: Flight[]
        authenticated: True
      # POST Create a flight
      - method: POST
        route: /flights
        description: Create a new flight
        request: FlightRequest
        response: Flight
        authenticated: True
      # PUT Update a flight
      - method: PUT
        route: /flights/:id
        description: Update a flight
        request: FlightRequest
        response: Flight
        authenticated: True
      # DELETE Delete a flight
      - method: DELETE
        route: /flights/:id
        description: Delete a flight
        request: null
        response: IdObject
        authenticated: True

  - name: Visits
    description: Endpoints related to Visits (Tripz)
    types: types/visits.ts
    validators: validators/visits.ts
    endpoints:
      # GET Fetch all visits
      - method: GET
        route: /visits
        description: Get all visits of the current user
        request: null
        response: Visit[]
        authenticated: True
      # POST Create a visit
      - method: POST
        route: /visits
        description: Create a new visit
        request: VisitRequest
        response: Visit
        authenticated: True
      # PUT Update a visit
      - method: PUT
        route: /visits/:id
        description: Update a visit
        request: VisitRequest
        response: Visit
        authenticated: True
      # DELETE Delete a visit
      - method: DELETE
        route: /visits/:id
        description: Delete a visit
        request: null
        response: IdObject
        authenticated: True

  - name: Public
    description: Public, non-authenticated endpoints
    types: types/public.ts
    validators: null
    endpoints:
      # GET Fetch all trips by user ID
      - method: GET
        route: /public/trips/:id
        description: Get all trips by user ID
        request: null
        response: Trips
        authenticated: False
